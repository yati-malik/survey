{"version":3,"sources":["API/surveyAPI.js","Components/dfs.js","Components/userSurvey.js","App.js","serviceWorker.js","index.js"],"names":["GetSurvey","pageNumber","a","fetch","response","json","pages","getNodeAndLongestPathMap","survey","visited","calculate","question","visitedObj","currentPathIdentifier","questionId","dfsLength","find","item","push","options","option","questionPointer","newQuestion","getQuestionForQuestionId","filter","element","UserSurvey","props","useState","percentage","setPercentage","userSurvey","setUserSurvey","questionCount","setQuestionCount","createdSurvey","useRef","dfsArray","useEffect","then","current","newSurvey","GetPathArray","console","log","className","length","questionText","map","key","optionId","type","data-questionid","name","id","optionName","value","onClick","event","radioButtons","document","querySelectorAll","checked","questioId","dataset","questionid","ele","newQuestionCount","completedPercentage","toFixed","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.67c38b5d.chunk.js","sourcesContent":["const GetSurvey = async(pageNumber) => {\r\n    const response = await fetch('https://yati-malik.github.io/survey/surveyOne.json');\r\n    const pages = await response.json();\r\n    return pages;\r\n};\r\n\r\nexport default GetSurvey;","const getNodeAndLongestPathMap = (survey) => {\r\n  let stack = [];\r\n  let visited = [];\r\n  let rootNode = {...survey[0]};\r\n  calculate(rootNode);\r\n  return visited;\r\n\r\n  function calculate(question) {\r\n    let visitedObj = {\r\n        currentPathIdentifier: question.questionId,\r\n        dfsLength: 1\r\n    };\r\n    if(visited.find((item) => item.currentPathIdentifier == visitedObj.currentPathIdentifier)){\r\n        return visitedObj.dfsLength;\r\n    }\r\n    visited.push(visitedObj);\r\n    for (let option of question.options) {\r\n        if(option.questionPointer !== null){\r\n            let newQuestion = getQuestionForQuestionId(option.questionPointer);\r\n            let dfsLength = calculate(newQuestion) + 1; \r\n            if(visitedObj.dfsLength < dfsLength){\r\n                visitedObj.dfsLength = dfsLength;\r\n            }        \r\n        }\r\n    }\r\n    return visitedObj.dfsLength;\r\n  }\r\n\r\n  function getQuestionForQuestionId(questionId){\r\n    let [question] = survey.filter((element) => element.questionId === questionId);\r\n    return {...question};\r\n  }\r\n};\r\n\r\nexport default getNodeAndLongestPathMap;\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport GetSurvey from \"../API/surveyAPI\";\r\nimport GetPathArray  from \"./dfs\";\r\n\r\nfunction UserSurvey(props) {\r\n  const [percentage, setPercentage] = useState(0);\r\n  const [userSurvey, setUserSurvey] = useState([]);\r\n  const [questionCount, setQuestionCount] = useState(0);\r\n  const createdSurvey = useRef([]);\r\n  const dfsArray = useRef([]);\r\n\r\n  useEffect(() => {\r\n    GetSurvey().then((survey) => {\r\n      createdSurvey.current = survey;\r\n      let newSurvey = [...userSurvey, survey[0]];\r\n      dfsArray.current = GetPathArray(survey);\r\n      console.log(dfsArray.current);\r\n      setUserSurvey(newSurvey);\r\n    });\r\n  }, []);\r\n\r\n  const handleOptionClick = (event) => {\r\n    let radioButtons = document.querySelectorAll('.question input[type=radio]')\r\n    for(let element of radioButtons){\r\n        if(element.checked){\r\n          let questioId = element.dataset.questionid;\r\n          let newQuestion = createdSurvey.current.filter((element) => element.questionId == questioId);\r\n          if(newQuestion.length === 0){\r\n              \r\n          }\r\n          else{\r\n            debugger;\r\n            let dfsLength = dfsArray.current.find((ele) => ele.currentPathIdentifier === questioId).dfsLength;\r\n            let newQuestionCount = questionCount + 1;\r\n            let completedPercentage = ((100 * newQuestionCount)/(dfsLength + newQuestionCount)).toFixed(2);\r\n            setQuestionCount(newQuestionCount);\r\n            setPercentage(completedPercentage);\r\n            setUserSurvey([...userSurvey, newQuestion[0]]);\r\n          }\r\n        }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>{percentage}</h1>\r\n      <div>\r\n        <div className=\"question\">\r\n          <span>\r\n            {userSurvey.length > 0\r\n              ? userSurvey[userSurvey.length - 1].questionText\r\n              : \"\"}\r\n          </span>\r\n          <br></br>\r\n          {userSurvey.length > 0\r\n            ? userSurvey[userSurvey.length-1].options.map((option) => {\r\n                return (\r\n                  <div\r\n                    key={\r\n                      userSurvey[userSurvey.length - 1].questionId +\r\n                      option.optionId\r\n                    }\r\n                    className=\"option\"\r\n                  >\r\n                    <input\r\n                      type=\"radio\"\r\n                      data-questionid={option.questionPointer}\r\n                      name=\"option\"\r\n                      id={option.optionId}\r\n                    ></input>\r\n                    <span className=\"option-name\">{option.optionName}</span>\r\n                  </div>\r\n                );\r\n              })\r\n            : \"\"}\r\n        </div>\r\n        <div>\r\n          <input type=\"button\" value=\"Next\" onClick={handleOptionClick}></input>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UserSurvey;\r\n","import React from 'react';\nimport UserSurvey from './Components/userSurvey';\nimport './App.css';\n\nfunction App() {\n  return (\n   <UserSurvey></UserSurvey>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}